from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from .models import User, Transaction, db
from itsdangerous import URLSafeTimedSerializer
import os
# Initialize URLSafeTimedSerializer
s = URLSafeTimedSerializer(os.getenv('SECRET_KEY'))

# Define the main blueprint
main = Blueprint('main', __name__)

@main.route('/')
def index():
    return jsonify(message="Welcome to the Personal Finance Management System!")

@main.route('/profile', methods=['GET'])
@jwt_required()
def profile():
    current_user = get_jwt_identity()
    return jsonify(logged_in_as=current_user), 200

# Define the auth blueprint
auth = Blueprint('auth', __name__)

@auth.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    email = data.get('email')
    password = data.get('password')

    if not username or not email or not password:
        return jsonify({'message': 'Missing required fields'}), 400

    if User.query.filter_by(username=username).first() or User.query.filter_by(email=email).first():
        return jsonify({'message': 'User already exists'}), 400

    new_user = User(username=username, email=email)
    new_user.set_password(password)
    print(f"Creating user: {username}, {email}")  # Debug print
    print(f"Hashed password: {new_user.password_hash}")  # Debug print

    db.session.add(new_user)
    db.session.commit()

    return jsonify({'message': 'User registered successfully'}), 201

@auth.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    user = User.query.filter_by(username=username).first()

    if user is None or not user.check_password(password):
        return jsonify({'message': 'Invalid credentials'}), 401

    access_token = create_access_token(identity={'username': user.username, 'email': user.email})
    return jsonify({'access_token': access_token}), 200

# Define the transactions blueprint
transactions = Blueprint('transactions', __name__)

@transactions.route('/transactions', methods=['POST'])
@jwt_required()
def create_transaction():
    current_user = get_jwt_identity()
    print(f"Current User: {current_user}")  # Debug print
    data = request.get_json()

    user = User.query.filter_by(username=current_user['username']).first()
    
    if not user:
        return jsonify({'message': 'User not found'}), 404

    new_transaction = Transaction(
        user_id=user.id,
        type=data.get('type'),
        amount=data.get('amount'),
        description=data.get('description')
    )

    db.session.add(new_transaction)
    db.session.commit()

    return jsonify({'message': 'Transaction created successfully'}), 201


@transactions.route('/transactions', methods=['GET'])
@jwt_required()
def get_transactions():
    current_user = get_jwt_identity()
    user = User.query.filter_by(username=current_user['username']).first()

    if not user:
        return jsonify({'message': 'User not found'}), 404

    transactions = Transaction.query.filter_by(user_id=user.id).all()
    result = []
    for transaction in transactions:
        transaction_data = {
            'id': transaction.id,
            'type': transaction.type,
            'amount': transaction.amount,
            'description': transaction.description,
            'date': transaction.date
        }
        result.append(transaction_data)

    return jsonify(result), 200

@transactions.route('/transactions/<int:id>', methods=['PUT'])
@jwt_required()
def update_transaction(id):
    current_user = get_jwt_identity()
    data = request.get_json()
    user = User.query.filter_by(username=current_user['username']).first()

    if not user:
        return jsonify({'message': 'User not found'}), 404

    transaction = Transaction.query.filter_by(id=id, user_id=user.id).first()

    if not transaction:
        return jsonify({'message': 'Transaction not found'}), 404

    if 'type' in data:
        transaction.type = data['type']
    if 'amount' in data:
        transaction.amount = data['amount']
    if 'description' in data:
        transaction.description = data['description']

    db.session.commit()

    return jsonify({'message': 'Transaction updated successfully'}), 200

@transactions.route('/transactions/<int:id>', methods=['DELETE'])
@jwt_required()
def delete_transaction(id):
    current_user = get_jwt_identity()
    user = User.query.filter_by(username=current_user['username']).first()

    if not user:
        return jsonify({'message': 'User not found'}), 404

    transaction = Transaction.query.filter_by(id=id, user_id=user.id).first()

    if not transaction:
        return jsonify({'message': 'Transaction not found'}), 404

    db.session.delete(transaction)
    db.session.commit()

    return jsonify({'message': 'Transaction deleted successfully'}), 200


@auth.route('/update_profile', methods=['PUT'])
@jwt_required()
def update_profile():
    current_user = get_jwt_identity()
    data = request.get_json()
    
    user = User.query.filter_by(username=current_user['username']).first()
    
    if not user:
        return jsonify({'message': 'User not found'}), 404

    if 'username' in data:
        user.username = data['username']
    if 'email' in data:
        user.email = data['email']
    if 'password' in data:
        user.set_password(data['password'])

    db.session.commit()

    return jsonify({'message': 'User profile updated successfully'}), 200


@auth.route('/delete_profile', methods=['DELETE'])
@jwt_required()
def delete_profile():
    current_user = get_jwt_identity()
    
    user = User.query.filter_by(username=current_user['username']).first()
    
    if not user:
        return jsonify({'message': 'User not found'}), 404

    db.session.delete(user)
    db.session.commit()

    return jsonify({'message': 'User profile deleted successfully'}), 200


@auth.route('/request_password_reset', methods=['POST'])
def request_password_reset():
    data = request.get_json()
    email = data.get('email')

    user = User.query.filter_by(email=email).first()

    if not user:
        return jsonify({'message': 'User not found'}), 404

    token = s.dumps(email, salt='password-reset-salt')
    # In a real application, you would send the token to the user's email
    return jsonify({'message': 'Password reset token generated', 'token': token}), 200


@auth.route('/reset_password/<token>', methods=['POST'])
def reset_password(token):
    try:
        email = s.loads(token, salt='password-reset-salt', max_age=3600)
    except:
        return jsonify({'message': 'The reset link is invalid or has expired'}), 400

    data = request.get_json()
    new_password = data.get('password')

    user = User.query.filter_by(email=email).first()

    if not user:
        return jsonify({'message': 'User not found'}), 404

    user.set_password(new_password)
    db.session.commit()

    return jsonify({'message': 'Password has been reset'}), 200



